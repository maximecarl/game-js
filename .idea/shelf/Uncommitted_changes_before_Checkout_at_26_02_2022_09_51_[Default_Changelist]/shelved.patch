Index: sources/scripts/game/Game.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Deck } from '../cards/Deck.js';\r\nimport { Card } from '../cards/Card.js';\r\nimport { Displayer } from './Displayer.js';\r\nimport { GameMaster } from '../user/GameMaster.js';\r\nimport { NotifyCenter } from '../events/NotifyCenter.js';\r\nimport {VibrationManager} from \"../events/VibrationManager.js\";\r\nimport {KeyboardEventsManager} from \"../events/KeybordEventsManager.js\";\r\nimport {ButtonManager} from \"../events/ButtonManager.js\";\r\n\r\nclass Game {\r\n    constructor() {\r\n        this.user = null;\r\n        this.deck = new Deck();\r\n        this.gameMaster = new GameMaster();\r\n        this.displayer = new Displayer();\r\n        this.terminated = false;\r\n        this.notifyCenter = new NotifyCenter();\r\n        this.vibrate = new VibrationManager() ;\r\n    }\r\n\r\n    initGame(user) {\r\n        if (user.isValid()) {\r\n            this.user = user;\r\n            KeyboardEventsManager.cancelDrawEvent(this.deck,this.notifyCenter) ;\r\n            KeyboardEventsManager.drawEvent(this) ;\r\n            // Check if deck is builded\r\n            const deckBuildInterval = setInterval(() => {\r\n                if (this.deck.id) {\r\n    \r\n                    // Set the interface\r\n                    this.displayer.initGame(this);\r\n    \r\n                    clearInterval(deckBuildInterval);\r\n                }\r\n            }, 200);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        if (!this.terminated) {\r\n            ButtonManager.enableButtonRestart();\r\n            this.deck.drawCard()\r\n            .then(data => {\r\n                if (data.success) {\r\n                    for (const cardData in data.cards) {\r\n                        const card = new Card(data.cards[cardData]);\r\n                        this.user.receiveCard(card);\r\n                    }\r\n                    this.terminated = this.isTerminated();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    restart(){\r\n            if(this.user.hand.cards.length > 0){\r\n                this.deck.reshuffle()\r\n                .then(() => {\r\n                    ButtonManager.enableButton();\r\n                    this.user.resetHand();\r\n                    this.displayer.resetHandDisplay();\r\n                    this.terminated=false;\r\n                    console.log(this.user.hand)\r\n                })\r\n            }\r\n       \r\n    }\r\n\r\n    isTerminated() {\r\n        if (!this.user.hadValidHand()) {\r\n            ButtonManager.desableButton();\r\n            this.setDefeat();\r\n            return true;\r\n        } else if (this.user.hand.nbPoints === 21) {\r\n            ButtonManager.desableButton();\r\n            this.setVictory();\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    endTurn() {\r\n        // Check by security, not mandatory\r\n        this.terminated = this.isTerminated(); \r\n        \r\n        if (!this.terminated){\r\n            this.terminated = true;\r\n            ButtonManager.desableButton();\r\n            this.deck.drawCard()\r\n            .then(data => {\r\n                if (data.success) {\r\n                    for (const cardData in data.cards) {\r\n                        const card = new Card(data.cards[cardData]);\r\n                        this.gameMaster.receiveCard(card);\r\n\r\n                        console.log(card);\r\n\r\n                        let totalPoints = card.gameValue + this.user.hand.nbPoints;\r\n                        if (totalPoints > 21) {\r\n                            this.setVictory();\r\n                        }else {\r\n                            this.setDefeat();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    setVictory() {\r\n        let victoryMessage = document.createTextNode('Victoire !');\r\n        this.notifyCenter.notify(\r\n            victoryMessage, \r\n            'success'\r\n        );\r\n        this.vibrate.createVibration([100,10,100]) ;\r\n        this.user.victory ++;\r\n    }\r\n\r\n    setDefeat() {\r\n        let defeatMessage = document.createTextNode('DÃ©faite...');\r\n        this.notifyCenter.notify(\r\n            defeatMessage,\r\n            'error'\r\n        );\r\n        this.vibrate.createVibration(100) ;\r\n        this.displayer.setDefeat();\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { Game };
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sources/scripts/game/Game.js	(revision 4fa8d254a5261a4220029d0348f91941b4a03188)
+++ sources/scripts/game/Game.js	(date 1642096083036)
@@ -6,6 +6,7 @@
 import {VibrationManager} from "../events/VibrationManager.js";
 import {KeyboardEventsManager} from "../events/KeybordEventsManager.js";
 import {ButtonManager} from "../events/ButtonManager.js";
+import { CardStorage } from "../storage/CardStorage.js" ;
 
 class Game {
     constructor() {
@@ -16,6 +17,7 @@
         this.terminated = false;
         this.notifyCenter = new NotifyCenter();
         this.vibrate = new VibrationManager() ;
+        this.storage = window.localStorage ;
     }
 
     initGame(user) {
@@ -38,6 +40,7 @@
 
     draw() {
         if (!this.terminated) {
+
             ButtonManager.enableButtonRestart();
             this.deck.drawCard()
             .then(data => {
@@ -45,6 +48,7 @@
                     for (const cardData in data.cards) {
                         const card = new Card(data.cards[cardData]);
                         this.user.receiveCard(card);
+                        CardStorage.addCardToStorage(data.cards[cardData]) ;
                     }
                     this.terminated = this.isTerminated();
                 }
@@ -60,6 +64,7 @@
                     this.user.resetHand();
                     this.displayer.resetHandDisplay();
                     this.terminated=false;
+                    CardStorage.clearStorage() ;
                     console.log(this.user.hand)
                 })
             }
@@ -67,12 +72,15 @@
     }
 
     isTerminated() {
+
         if (!this.user.hadValidHand()) {
             ButtonManager.desableButton();
+            CardStorage.clearStorage() ;
             this.setDefeat();
             return true;
         } else if (this.user.hand.nbPoints === 21) {
             ButtonManager.desableButton();
+            CardStorage.clearStorage() ;
             this.setVictory();
             return true;
         }
@@ -87,6 +95,7 @@
         if (!this.terminated){
             this.terminated = true;
             ButtonManager.desableButton();
+            CardStorage.clearStorage() ;
             this.deck.drawCard()
             .then(data => {
                 if (data.success) {
